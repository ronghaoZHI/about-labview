#define DHT11_PIN 0 // ADC0 接到模拟口0
int ledPin = 13;       // led指示灯引脚
int inPin  = 12;       // 定义输入引脚
int buttonState;             // 读取的当前按键状态
char comdata[2]={};
 byte dht11_dat[5];
byte read_dht11_dat()
{
 byte i = 0;
 byte result=0;
 for(i=0; i< 8; i++){
 while(!(PINC & _BV(DHT11_PIN))); // wait for 50us
 delayMicroseconds(30);
 if(PINC & _BV(DHT11_PIN))
 result |=(1<<(7-i));
 while((PINC & _BV(DHT11_PIN))); // wait '1' finish
 }
 return result;
}

void setup()
{
  // 声明引脚为输出模式
  pinMode(ledPin, OUTPUT);  
  pinMode(inPin, INPUT);
 DDRC |= _BV(DHT11_PIN);
 PORTC |= _BV(DHT11_PIN);
 Serial.begin(19200);
 Serial.println("Ready");
}

void receive_data(void)       
{

   
   byte dht11_in;
   byte i;
   int z ;
   // start condition
   // 1. pull-down i/o pin from 18ms
   PORTC &= ~_BV(DHT11_PIN);
   delay(18);
   PORTC |= _BV(DHT11_PIN);
   delayMicroseconds(40);
   DDRC &= ~_BV(DHT11_PIN);
   delayMicroseconds(40);
   dht11_in= PINC & _BV(DHT11_PIN);
   if(dht11_in){
   //Serial.println("dht11 start condition 1 not met");
   return;
   }
   delayMicroseconds(80);
   dht11_in = PINC & _BV(DHT11_PIN);
   if(!dht11_in){
   //Serial.println("dht11 start condition 2 not met");
   return;
   }
   delayMicroseconds(80);
   // now ready for data reception
   for (i=0; i<5; i++)
   dht11_dat[i] = read_dht11_dat();
   DDRC |= _BV(DHT11_PIN);
   PORTC |= _BV(DHT11_PIN);
   byte dht11_check_sum = dht11_dat[0]+dht11_dat[1]+dht11_dat[2]+dht11_dat[3];
   
     for(z=0;z<1;i++)
     {
        comdata[i] =Serial.read();
        //延时一会，让串口缓存准备好下一个字节，不延时可能会导致数据丢失，
         delay(2);
     }
}
void button(void)
{
  if(buttonState == HIGH) //如果读入是高电平，说明有人进入区域 
      {digitalWrite(ledPin, HIGH);  //吸合继电器
       Serial.print(1, DEC);
      }else {
       digitalWrite(ledPin, LOW);  //吸合继电器
       Serial.print(0, DEC);
       }
}
 
void test_do_data(void)
{
  
     if(comdata[0] == 0xAA)
     {
        switch(comdata[1])
        {
        case 0x10:
 
   Serial.print(dht11_dat[0], DEC);
   Serial.print(".");
   Serial.print(dht11_dat[1], DEC);
  break;
    
   case 0x20:
   
   Serial.print(dht11_dat[2], DEC);
   Serial.print(".");
   Serial.print(dht11_dat[3], DEC);
          break;
          case 0x30:
    buttonState = digitalRead(inPin);
     
     button();
      break;
    }
     }
}

void loop()
{
  while (Serial.available() > 0)   //不断检测串口是否有数据
   {
        receive_data();            //接受串口数据
        test_do_data();            //测试数据是否正确并更新标志位
   }
}